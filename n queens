def solve_n_queens(n):
    board = [[0] * n for i in range(n)]
    if solve(0, board, n):
        print_board(board)
    else:
        print("No solution exists")

def solve(row, board, n):
    if row == n:
        return True
    for col in range(n):
        if is_safe(row, col, board, n):
            board[row][col] = 1
            if solve(row + 1, board, n):
                return True
            board[row][col] = 0
    return False

def is_safe(row, col, board, n):
    for i in range(row):
        if board[i][col] == 1:
            return False
    i, j = row - 1, col - 1
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i, j = i - 1, j - 1
    i, j = row - 1, col + 1
    while i >= 0 and j < n:
        if board[i][j] == 1:
            return False
        i, j = i - 1, j + 1
    return True

def print_board(board):
    for row in board:
        line = ""
        for cell in row:
            if cell == 1:
                line += "Q"
            else:
                line += "."
        print(line)

n = 4
solve_n_queens(n)
